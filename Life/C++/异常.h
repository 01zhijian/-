
/* ------------------------------ 学习笔记 ------------------------------ *

处理错误的四个建议
- 在函数中处理错误
- 将错误传递回调用方以处理
- 停止程序
- 抛出一个异常

不同的错误等级，应该使用不同的错误处理方式

因为将错误从函数返回给调用者是很复杂的（而且许多不同的方法会导致不一致，而不一致
会导致错误），所以 C++ 提供了一种完全独立的方法来将错误传递给调用者：异常
异常的基本思想是，当错误出现时，会“抛出”一个异常。如果当前函数没有“捕获”错误
那么函数的调用方就有机会捕获错误。如果调用方没有捕获错误，则调用方有机会捕获错误
错误逐渐向上移动调用堆栈，直到它被捕获和处理（此时执行正常继续），或者直到main无
法处理错误（此时程序因异常错误而终止）。


当程序出错时返回错误代码
优：方便
劣
- 返回值可能晦涩难懂
- 返回值只能够返回一个值
- 在许多事情都可能出错的代码序列中，必须不断地检查错误代码
- 返回代码与构造函数不能很好地混合
- 当向调用方返回错误代码时，调用方可能并不总是具备处理错误的能力

捕获到异常之后，在 catch 块中可能做的事情
- 打印错误消息（到控制台或文件），并且允许函数继续执行
- 返回错误代码给调用者：这样，不同的应用程序就能够以不同的方式处理错误，将错误
	处理放在代码中模块化程度较低的部分
- 引发另一个异常
- 捕获 fatal errors，并且以 clean way 终止程序

备注：当动态分配的变量被删除时，内存被“返回”到堆中，然后可以在接收到未来的分配
	请求时重新分配。请记住，删除指针并不会删除变量，它只是将关联地址的内存返回给
	操作系统。

堆的优缺点
- 在堆上分配内存相对较慢
- 分配的内存保持分配，直到它被特别释放（小心内存泄露）或应用程序结束（此时操作
	系统应该清理它）
- 动态分配的内存必须通过指针访问。解除指针的引用比直接访问变量要慢
- 因为堆是一个很大的内存池，所以可以在这里分配大型数组、结构或类

栈的优缺点
- 在栈上分配内存相对较快
- 在栈上分配的内存只要在栈上，就保留在作用域中。当它从堆栈中弹出时，它将被销毁
- 在编译时，栈上分配的所有内存都是已知的。因此，可以通过变量直接访问该内存
- 因为栈相对较小，所以任何占用大量栈空间的事情通常都不是一个好主意。这包括值传递
	或创建大型数组或其它内存密集型结构的局部变量


异常处理最好在满足以下所有条件时使用
- 正在处理的错误很可能只是偶尔发生
- 错误很严重，否则无法继续执行
- 无法在发生错误的地方处理该错误
- 没有一种好的替代方法可以将错误代码返回给调用者

异常安全的四个级别
- 没有保证――没有保证在抛出异常时会发生什么
- 基本保证――如果抛出异常，不会泄露内存，对象仍然可用，但程序可能处于修改状态
- 强保证――如果抛出异常，则不会泄露内存并且不会更改程序状态
- 没有抛出异常



*/

void test_exception();

double mySqrt(double x);