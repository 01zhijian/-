#pragma once

/* ------------------------------ 学习笔记 ------------------------------ *
一致性
	一致性是指保持一致的模式。包含在整个系统中命名的约定、数据结构和接口，
以及坚持既定的原则和最佳实践。一致性能够是系统更容易维护、更容易理解，更
容易扩展。

有意义的命名：帕斯卡命名法、驼峰命名法、匈牙利命名法、蛇形命名法与短横线命名法
- 变量是名词
- 函数或方法是动词
- Name booleans positively：正向表示的是一种肯定，负向表示的是一种否定
- 区分成员变量：使用前缀 m 或 _，例如 mSize/m_Size/_Size，有助于区分成员变量，并且可以使用自动补全功能
- 可以使用描述性的文字进行命名
- 注意大小写
- 使用单数命名：例如不要使用 items，而是使用 itemList
- 保持命名的一致性

缩进和代码样式
	使用空白符进行缩进，能够在视觉上将有关联的代码进行分组，使代码更易被
阅读和理解，也能够使后期的维护更为简单。
垂直格式：把文件的标题、关键性概念、算法等重要的信息放在源代码的最开头（就如同阅读一份报纸一样）
垂直密度：概念之间的垂直开放性
垂直距离：将变量的声明与其使用之间的距离尽可能的短
垂直顺序：代码的顺序应该本能表示程序的依赖关系。在阅读每一行时，应该有一个自然的流程
水平格式：推荐 80 个字符
水平密度：尽可能不要滑动滚动条才能看到代码
水平对齐和缩进：
Your style and discipline survive, even though your code does not.


*/
