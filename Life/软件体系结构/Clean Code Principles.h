#pragma once

/* ------------------------------ 学习笔记 ------------------------------ *
一致性
	一致性是指保持一致的模式。包含在整个系统中命名的约定、数据结构和接口，
以及坚持既定的原则和最佳实践。一致性能够是系统更容易维护、更容易理解，更
容易扩展。

有意义的命名：帕斯卡命名法、驼峰命名法、匈牙利命名法、蛇形命名法与短横线命名法
- 变量是名词
- 函数或方法是动词
- Name booleans positively：正向表示的是一种肯定，负向表示的是一种否定
- 区分成员变量：使用前缀 m 或 _，例如 mSize/m_Size/_Size，有助于区分成员变量，并且可以使用自动补全功能
- 可以使用描述性的文字进行命名
- 注意大小写
- 使用单数命名：例如不要使用 items，而是使用 itemList
- 保持命名的一致性
- 使用意图明显的名称
- 类名是名词
- 使用有意义的区别
- 使用发音命名
- 使用好被搜索的命名
- 避免编码
- 当每个函数都与您预期的差不多时，您就知道自己正在编写干净的代码
- Noise words：Data、Value、Info、Variable、Table、String、Object，没有提供什么
	有效的描述信息
- 避免魔法数字，通过使用枚举能够避免魔法数字
- 

int d;
string arr;
bool flag;

int getAnswer(int a, int b){}

int courseDurationInDays;
string chapterNames;
bool isCellVisited;

int getSum(int firstNum, int secondNum){}



缩进和代码样式
	使用空白符进行缩进，能够在视觉上将有关联的代码进行分组，使代码更易被
阅读和理解，也能够使后期的维护更为简单。
垂直格式：把文件的标题、关键性概念、算法等重要的信息放在源代码的最开头（就如同阅读一份报纸一样）
垂直密度：概念之间的垂直开放性
垂直距离：将变量的声明与其使用之间的距离尽可能的短
垂直顺序：代码的顺序应该本能表示程序的依赖关系。在阅读每一行时，应该有一个自然的流程
水平格式：推荐 80 个字符
水平密度：尽可能不要滑动滚动条才能看到代码
水平对齐和缩进：
Your style and discipline survive, even though your code does not.

保持small
	设计和实现小型的、重点突出的组件，服务于特定的目标，而不是大型的组件。

Pure Functions
- 可能有输入参数，并且返回或输出值
- 不会引发任何可以观测到的副作用，例如修改系统的状态或与外部资源通信
- 使用相同的输入，总是能够得到相同的输出
- 不需要依赖外部状态或变量
Pure functions 被认为容易预测其行为与方便测试，它们的行为由输入决定。并发编程
的时候，这个原则也是十分的重要。

圈复杂度
	圈复杂度是度量程序的一种指标，数量上表示为线性无关的路径条数。圈复杂度越高，
会使程序难以理解、测试和维护。以下是降低圈复杂度的一些方法（Create Happy Path）：
- 将圈复杂度高的函数分解为复杂度底的函数
- 以一致和可预测的方式使用控制结构，如if-else和循环
- 使用函数式编程的概念和技术，例如不变性和 pure functions，来减少复杂的控制流程
- 使用诸如状态之类的设计模式来简化复杂的控制流程
- 定期检查代码并重构它，以简化控制流
- 使用静态代码检查工具，并报告出高复杂度的代码出来


避免传递 null 和 Booleans
- Use Optionals or Maybe types instead of nulls，这样可以清楚地说明缺少值时的情况，并防止空引用异常
- 函数使用默认参数，而不是允许它们为 null 或 Boolean。这样可以消除空指针的检测
	或 Boolean 值的检测，且可以减少潜在的错误
- 使用 the Null Object pattern 来代替 null 值，空对象拥有默认的行为。从而不需要检测空值。
- 当遇到 Booleans 时，使用三目运算符，而不是使用 if-else 语句，这样能够使代码看
	起来更为的简洁和更加容易阅读
- 使用断言去检查函数参数的有效性，并且在参数无效的时候抛出一个异常

Keep Framework Code Distant
	将应用程序代码与框架代码分开。这样做能够独立的分别对应该程序代码与框架代码
进行测试、维护和升级。
- 使用抽象层将应用程序代码与框架代码分开。这允许编写应用程序代码，而不需要了解
	框架代码的细节
- 使用依赖注入将应用程序代码与框架代码分离。这允许应用程序代码使用框架的功能，
	而不必直接实例化框架对象
- 避免在应用程序代码中使用特定于框架的库或类。这使得将来在需要时更容易切换到不
	同的框架
- 使用应用程序代码的标准接口与框架进行交互。这允许编写应用程序代码，而不需要了
	解框架的细节
- 应将应用程序和框架代码保存在单独的项目和/或存储库中

使用合适的结构

保持测试的独立性
	保持测试的独立性，确保测试是可信赖的，可重复的和容易维护的。当一个测试改变
并不会影响到其它的测试结果
- 使用依赖注入将测试代码与应用程序代码分离。这允许在不需要直接实例化应用程序对
	象的情况下运行测试
- 使用模拟或存根将测试与数据库、API 或其它服务等外部依赖项隔离开来
- 使用自包含且不依赖于外部数据或状态的测试数据
- 使用支持并行运行测试框架，这样可以批次独立运行
- 使用测试驱动开发（test-driven development，TDD），包括在编写应用程序代码之前
	编写测试。这样可以确保测试是独立的，并且在编写代码时考虑到了可测试性
- 避免全局状态和共享可变状态，因为它可能导致意外的结果

Code by Actor
	“Code by Actor”是一种软件开发技术，它鼓励开发人员围绕与其交互的参与者或实
体来组织代码。Actors 可以是用户、系统等。

Command Query Separation（CQS）
	CQS 是一个软件开发原则，指的是将方法或函数的职责分为两类：命令和查询。命令
是用来改变系统的状态，然而查寻是返回相关信息但并不改变系统的状态。

避免仓促的抽象
- 在使用抽象之前，理解需要解决问题
- 开始使用一个简单的解决方案，在解决方案逐渐清晰之后，逐渐增加其复杂度
- 使用代码重构技术
- 避免为了使用抽象而使用抽象
- 使用抽象的时候，使用稳定的设计模式和实践，且不要迫切的将它们放进代码当中
- 使用自动测试技术确保使用的抽象没有引入新的 Bug 或没有破坏现有功能
- 以一种易于测试、调试和推理的方式创建抽象




*/
