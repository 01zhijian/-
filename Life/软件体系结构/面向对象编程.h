#pragma once

/* ------------------------------ 学习笔记 ------------------------------ *

面向对象主要原则

- 封装性：将对象的内部数据和行为封装在已定义的接口中，并对外部世界隐藏实现细节
	的实践
- 继承性
	- 重用不是等级：当您有两个或多个具有公共方法或字段的类时，创建一个超类并继承
		共享行为
	- 组合和委托（重构代码）：当一个类确实适用于两个或多个类时，将相关的方法提取
		到它自己的类中，并用新的类组合您的依赖类
- 多态性
	- 编译时多态性（也称静态多态性或早期绑定）发生在编译时确定将被操作的对象的
		类型时。这是通过方法重载实现的，方法重载允许多个方法在同一类中具有相同
		的名称但是具有不同的参数
	- 当在运行时确定对象的类型时，就会发生运行时多态性（也称动态多态性或后期绑定）
		这是通过方法重写实现的，方法重写允许子类提供已在其父类中定义的方法的特定实现
- 抽象性：隐藏对象的实现细节并只暴露其基本特征、降低复杂度和提高代码模块性的过程。
	抽象性是一种与任何特定实例无关的概念。抽象是设计的根本原则
	= The ability to design using contracts vs concretions
	= The ability to separtate the what from the how
	= The ability to focus on the declarative separately from the imperative
	= The ability to focus on the high-level ideas separtately from the low-level details
	= 数据抽象：指隐藏数据的内部表示，并通过一组定义良好的接口提供数据的简化试图
		通过一个数据结构来隐藏原始数据实体，这个数据结构可以在内部通过隐藏的数据
		实体工作。作为程序员，我们不需要知道底层实体是什么，它看起来如何等等
	= 行为抽象：指隐藏对象的内部行为，并通过一组定义良好的接口提供其功能的简化视图

- 类：创建对象的蓝图，蓝图由数据（属性）和行为（方法）组成
- 对象：类的实例
- 接口
- 动态绑定
- 消息传递


经验法则：只从 contracts 继承，而不是 concretions 继承。如果您打算使用传统的面向
	对象方法来继承，我通常建议您只从 contracts（接口、抽象类、类型）继承或扩展，
	而不是从具体（类）继承或扩展。有一个设计方法可以解释为什么这个规则是有意义的（
	参见责任驱动式设计），但是作为一个快速的经验法则，如果您发现自己需要子类化一
	个 concretions 类，您会知道您是否使用继承很糟糕。

责任驱动式设计（Responsibility-Driven Design，RDD）
- Role：相关职责的集合
- Resoponsibility：An obligation to do（some task/behavior）or know something（
	some data）
- Collaboration：An interaction of objects or roles（or both）


模型驱动设计
	模型驱动设计是一种程序设计方法学，系统的设计由一组模型表示，这些模型用于驱动
系统的开发。MDD 的基本思想是，系统的设计可以由一组模型来表示，并且这些模型可以用
来为系统生成代码。
	使用 MDD 的主要优势在于它允许在系统的设计和实现之间有一个明确的关注点分离。模
型代表系统的设计，代码是从模型中生成的，这使得维护和演进系统变得更加容易。此外，
MDD 还可以提高代码的质量，因为在生成代码之前，可以使用模型来检测设计错误和不一致性。

- Domain Models：领域模型是知识或业务的特定的表示，用于对该领域中的对象和概念进
	行建模，并捕获它们之间的关系和约束。在面向对象程序设计（OOP）中，领域模型通
	常由一组类和接口表示，每个类或接口表示领域内的特定概念或对象
- Anemic Models：贫血模型，是一种领域模型，其中领域对象只包含（属性）和缺乏行为。
	贫血模型通常导致使用数据传输对象（DTO）和服务层来处理行为
- Layered Architectures：分层体系结构是一种软件设计模式，其中系统的功能被划分为
	一组层，每一层具有特定的职责，并与上层和下层进行交互。分层体系结构背后的主要
	思想是将系统的关注点分成不同的、独立的层，使代码更加模块化，更容易理解、测试
	和修改。常见的三层：表现层、业务层、数据访问层
- 领域语言是一种特定的词汇表和一组概念，用于描述和交流特定的知识或业务领域。在软
	件开发中，领域语言用于对特定领域中的对象和概念进行建模，并捕获它们之间的关系
	和约束。领域语言用于提供所有涉众（包括开发人员、业务分析人员和领域专家）对问
	领域的共同理解。它还用于确保软件系统准确地反应它要解决的真实世界的问题
- Class Invariants：类不变量是一组条件，对于类的任何对象，在任何时间点都必须为真。
	在面向对象程序设计（OOP）中，类不变量用于定义对象的有效状态，并确保对象始终保
	持有效状态。
- 类不变量通常在类的构造函数中定义，并通过使用用于验证对象状态的私有方法和数据成员
	来实现。它们还会在可以更改对象状态的任何操作之前和之后在类的方法中进行检查








*/
